name: Deploy Shared Infrastructure

on:
  push:
    branches: [main]
    paths:
      - "terraform/**"
      - ".github/workflows/deploy-infra.yml"
  pull_request:
    branches: [main]
    paths:
      - "terraform/**"
      - ".github/workflows/deploy-infra.yml"
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write # Required for GitHub OIDC
  contents: read # Required to checkout repository
  pull-requests: write # Required to comment on PRs

env:
  TF_VERSION: "1.5.7"
  AWS_REGION: "us-east-1"

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=shared-infra/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.TF_STATE_LOCK_TABLE }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="github_repositories=[\"${{ github.repository }}\"]" \
            -out=tfplan \
            -detailed-exitcode
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'))
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: |
          terraform plan -destroy \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="github_repositories=[\"${{ github.repository }}\"]" \
            -out=destroy-plan
          terraform apply -auto-approve destroy-plan

      - name: Upload Terraform Outputs
        if: github.ref == 'refs/heads/main' && (steps.plan.outcome == 'success' && github.event_name == 'push')
        run: |
          terraform output -json > terraform-outputs.json
          echo "Terraform outputs saved to terraform-outputs.json"

      - name: Upload Outputs Artifact
        if: github.ref == 'refs/heads/main' && (steps.plan.outcome == 'success' && github.event_name == 'push')
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/terraform-outputs.json
          retention-days: 30

      - name: Display Infrastructure Summary
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "## üöÄ Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**VPC ID:** $(terraform output -raw vpc_id)" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway URL:** $(terraform output -raw api_gateway_invoke_url)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Bucket:** $(terraform output -raw deployment_bucket_name)" >> $GITHUB_STEP_SUMMARY
          echo "**Lambda Execution Role:** $(terraform output -raw lambda_execution_role_arn)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Next Steps for Lambda Teams" >> $GITHUB_STEP_SUMMARY
          echo "1. Reference this infrastructure using Terraform remote state" >> $GITHUB_STEP_SUMMARY
          echo "2. Use the provided outputs in your Lambda function configuration" >> $GITHUB_STEP_SUMMARY
          echo "3. Check the documentation for integration examples" >> $GITHUB_STEP_SUMMARY
