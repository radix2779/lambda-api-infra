# Configure the AWS Provider
terraform {
  required_version = ">= 1.0"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }

  backend "s3" {
    # Configure backend with your specific values
    # bucket = "your-terraform-state-bucket"
    # key    = "{{ service_name }}/terraform.tfstate"
    # region = "{{ aws_region }}"
    # dynamodb_table = "terraform-state-locks"
  }
}

provider "aws" {
  region = var.aws_region
}

# Data source for shared infrastructure
data "terraform_remote_state" "shared_infra" {
  backend = "s3"
  config = {
    bucket = var.shared_infra_state_bucket
    key    = var.shared_infra_state_key
    region = var.aws_region
  }
}

# Lambda function
resource "aws_lambda_function" "main" {
  function_name = var.lambda_function_name
  role         = data.terraform_remote_state.shared_infra.outputs.lambda_execution_role_arn
  handler      = "index.handler"
  runtime      = var.lambda_runtime
  timeout      = var.lambda_timeout
  memory_size  = var.lambda_memory

  s3_bucket = data.terraform_remote_state.shared_infra.outputs.deployment_bucket_name
  s3_key    = "${var.lambda_function_name}/deployment.zip"

  vpc_config {
    subnet_ids         = data.terraform_remote_state.shared_infra.outputs.private_subnet_ids
    security_group_ids = [data.terraform_remote_state.shared_infra.outputs.lambda_security_group_id]
  }

  {% if environment_variables %}environment {
    variables = {
{% for env_var in environment_variables.split(',') %}{% if env_var.strip() %}      {{ env_var.strip() }} = var.{{ env_var.strip().lower() }}
{% endif %}{% endfor %}    }
  }
{% endif %}
  depends_on = [
    aws_cloudwatch_log_group.lambda_logs,
  ]

  tags = {
    Name        = var.lambda_function_name
    Environment = var.environment
    Service     = "{{ service_name }}"
  }
}

# CloudWatch Log Group
resource "aws_cloudwatch_log_group" "lambda_logs" {
  name              = "/aws/lambda/${var.lambda_function_name}"
  retention_in_days = var.log_retention_days

  tags = {
    Name        = "${var.lambda_function_name}-logs"
    Environment = var.environment
    Service     = "{{ service_name }}"
  }
}

{% if enable_api_gateway %}# API Gateway Integration
resource "aws_api_gateway_resource" "main" {
  rest_api_id = data.terraform_remote_state.shared_infra.outputs.api_gateway_id
  parent_id   = data.terraform_remote_state.shared_infra.outputs.api_gateway_root_resource_id
  path_part   = var.api_path_part
}

# API Gateway Methods
resource "aws_api_gateway_method" "proxy" {
  rest_api_id   = data.terraform_remote_state.shared_infra.outputs.api_gateway_id
  resource_id   = aws_api_gateway_resource.main.id
  http_method   = "ANY"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "lambda" {
  rest_api_id = data.terraform_remote_state.shared_infra.outputs.api_gateway_id
  resource_id = aws_api_gateway_method.proxy.resource_id
  http_method = aws_api_gateway_method.proxy.http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = aws_lambda_function.main.invoke_arn
}

# Proxy resource for sub-paths
resource "aws_api_gateway_resource" "proxy" {
  rest_api_id = data.terraform_remote_state.shared_infra.outputs.api_gateway_id
  parent_id   = aws_api_gateway_resource.main.id
  path_part   = "{proxy+}"
}

resource "aws_api_gateway_method" "proxy_any" {
  rest_api_id   = data.terraform_remote_state.shared_infra.outputs.api_gateway_id
  resource_id   = aws_api_gateway_resource.proxy.id
  http_method   = "ANY"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "lambda_proxy" {
  rest_api_id = data.terraform_remote_state.shared_infra.outputs.api_gateway_id
  resource_id = aws_api_gateway_method.proxy_any.resource_id
  http_method = aws_api_gateway_method.proxy_any.http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = aws_lambda_function.main.invoke_arn
}

# Lambda permission for API Gateway
resource "aws_lambda_permission" "api_gw" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.main.function_name
  principal     = "apigateway.amazonaws.com"

  source_arn = "${data.terraform_remote_state.shared_infra.outputs.api_gateway_execution_arn}/*/*"
}

# API Gateway Deployment
resource "aws_api_gateway_deployment" "main" {
  depends_on = [
    aws_api_gateway_integration.lambda,
    aws_api_gateway_integration.lambda_proxy,
  ]

  rest_api_id = data.terraform_remote_state.shared_infra.outputs.api_gateway_id
  stage_name  = var.api_stage_name

  lifecycle {
    create_before_destroy = true
  }
}
{% endif %}
